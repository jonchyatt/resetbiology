'use client';

import { useEffect, useRef } from 'react';

export function SlugGenerator() {
  const nameInputRef = useRef<HTMLInputElement | null>(null);
  const slugInputRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    // Find the inputs after component mounts
    nameInputRef.current = document.getElementById('name') as HTMLInputElement;
    slugInputRef.current = document.getElementById('slug') as HTMLInputElement;

    if (!nameInputRef.current || !slugInputRef.current) return;

    const handleNameChange = () => {
      const nameValue = nameInputRef.current?.value || '';
      const slugValue = slugInputRef.current?.value || '';

      // Only auto-generate if slug is empty or was auto-generated before
      // (don't overwrite manual edits)
      if (slugValue === '' || slugInputRef.current?.dataset.autoGenerated === 'true') {
        const generatedSlug = nameValue
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/^-|-$/g, '');

        if (slugInputRef.current) {
          slugInputRef.current.value = generatedSlug;
          slugInputRef.current.dataset.autoGenerated = 'true';
        }
      }
    };

    const handleSlugManualEdit = () => {
      if (slugInputRef.current) {
        // Mark as manually edited so auto-generation stops
        slugInputRef.current.dataset.autoGenerated = 'false';
      }
    };

    // Attach event listeners
    nameInputRef.current.addEventListener('input', handleNameChange);
    slugInputRef.current.addEventListener('input', handleSlugManualEdit);

    // Cleanup
    return () => {
      nameInputRef.current?.removeEventListener('input', handleNameChange);
      slugInputRef.current?.removeEventListener('input', handleSlugManualEdit);
    };
  }, []);

  return null; // This component doesn't render anything
}
