generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  name                   String?
  email                  String?                  @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  auth0Sub               String?                  @unique
  rbClientId             String?                  @unique
  displayName            String?
  avatarUrl              String?
  role                   String                   @default("basic")
  profileJson            Json?
  permissionsJson        Json?
  accessLevel            String                   @default("guest")
  permissions            Json?
  subscriptionStatus     String                   @default("none")
  subscriptionExpiry     DateTime?
  trialStartDate         DateTime?
  trialEndDate           DateTime?
  drivePermissions       Json?
  driveFolder            String?
  profileData            Json?
  irbApprovalStatus      String?
  irbSubmissionDate      DateTime?
  affiliateTracking      AffiliateTracking[]
  breathSessions         BreathSession[]
  progress               ClientProgress[]
  gamificationPoints     GamificationPoint[]
  moduleCompletions      ModuleCompletion[]
  peptide_orders         peptide_orders[]
  successDeposits        SuccessDeposit[]
  user_peptide_protocols user_peptide_protocols[]
  dailyTasks             DailyTask[]
  foodEntries            FoodEntry[]
  mealPlans              MealPlan[]
  foodLogs               FoodLog[]
  workoutSessions        WorkoutSession[]
  workoutPrograms        WorkoutProgram[]
  journalEntries         JournalEntry[]

  @@map("users")
}

model ClientProgress {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String  @db.ObjectId
  metricType String
  value      Float
  date       DateTime @default(now())
  notes      String?
  user       User     @relation(fields: [userId], references: [id])

  @@map("client_progress")
}

model ModuleCompletion {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  @db.ObjectId
  moduleId       String
  completedAt    DateTime @default(now())
  localDate      String?  // User's local date YYYY-MM-DD for timezone-safe bucketing
  localTime      String?  // User's local time HH:MM:SS
  audioDuration  Int?
  fullCompletion Boolean  @default(false)
  user           User     @relation(fields: [userId], references: [id])

  @@map("module_completions")
}

model GamificationPoint {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  @db.ObjectId
  pointType      String
  amount         Int
  earnedAt       DateTime @default(now())
  activitySource String?
  user           User     @relation(fields: [userId], references: [id])

  @@map("gamification_points")
}

model SuccessDeposit {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String
  amount           Float
  status           String
  payoutConditions Json
  partnerShare     Float?
  createdAt        DateTime  @default(now())
  completedAt      DateTime?
  user             User      @relation(fields: [userId], references: [id])

  @@map("success_deposits")
}

model BreathSession {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  sessionType   String
  duration      Int
  cycles        Int?
  progressScore Float?
  createdAt     DateTime @default(now())
  localDate     String?  // User's local date YYYY-MM-DD for timezone-safe bucketing
  localTime     String?  // User's local time HH:MM:SS
  user          User     @relation(fields: [userId], references: [id])

  @@map("breath_sessions")
}

model AffiliateTracking {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String  @db.ObjectId
  referralCode String   @unique
  clicks       Int      @default(0)
  conversions  Int      @default(0)
  commissions  Float    @default(0)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@map("affiliate_tracking")
}

model Assessment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String? @db.ObjectId
  responses    Json
  results      Json?
  irbSubmitted Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@map("assessments")
}

model VariableReward {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  rewardType String
  amount     Int
  claimedAt  DateTime @default(now())

  @@map("variable_rewards")
}




model Peptide {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  slug                   String                   @unique
  name                   String
  dosage                 String?
  price                  Float
  originalUrl            String?
  casNumber              String?
  molecularFormula       String?
  purity                 String?
  halfLife               String?
  type                   String?
  classification         String?
  researchApplications   Json?
  keyBenefits            Json?
  keyFeatures            Json?
  mechanisms             Json?
  researchDosage         Json?
  researchProtocols      Json?
  color                  String?
  sequence               String?
  molecularWeight        String?
  storage                String?
  reconstitution         String?
  category               String
  subcategory            String?
  inStock                Boolean                  @default(true)
  featured               Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  peptide_education      peptide_education[]
  peptide_orders         peptide_orders[]
  user_peptide_protocols user_peptide_protocols[]

  @@map("peptides")
}

model peptide_categories {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   @unique
  slug         String   @unique
  description  String?
  displayOrder Int?     @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
}

model peptide_doses {
  id                     String                 @id @default(auto()) @map("_id") @db.ObjectId
  protocolId             String  @db.ObjectId
  doseDate               DateTime
  dosage                 String
  time                   String?
  notes                  String?
  sideEffects            String?
  createdAt              DateTime               @default(now())
  localDate              String?                // User's local date YYYY-MM-DD for timezone-safe bucketing
  localTime              String?                // User's local time HH:MM:SS
  user_peptide_protocols user_peptide_protocols @relation(fields: [protocolId], references: [id])
}

model peptide_education {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  peptideId    String  @db.ObjectId
  title        String
  content      String
  type         String
  displayOrder Int?     @default(0)
  isPublished  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  peptides     Peptide  @relation(fields: [peptideId], references: [id])
}

model peptide_orders {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String  @db.ObjectId
  peptideId    String  @db.ObjectId
  quantity     Int
  unitPrice    Float
  totalPrice   Float
  status       String   @default("pending")
  orderDate    DateTime @default(now())
  shippingInfo Json?
  trackingInfo Json?
  peptides     Peptide  @relation(fields: [peptideId], references: [id])
  users        User     @relation(fields: [userId], references: [id])
}

model user_peptide_protocols {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @db.ObjectId
  peptideId     String          @db.ObjectId
  startDate     DateTime        @default(now())
  endDate       DateTime?
  dosage        String
  frequency     String
  notes         String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  peptide_doses peptide_doses[]
  peptides      Peptide         @relation(fields: [peptideId], references: [id])
  users         User            @relation(fields: [userId], references: [id])
}

model DailyTask {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  date      DateTime
  taskName  String   // peptides, journal, workout, meals, module, breath
  completed Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, date, taskName], name: "userId_date_taskName")
  @@map("daily_tasks")
}

model FoodEntry {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  name     String
  calories Float
  protein  Float
  carbs    Float
  fats     Float
  mealType String   // breakfast, lunch, dinner, snack
  loggedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])

  @@map("food_entries")
}

model WorkoutSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  exercises   Json     // Array of exercises with sets/reps/weight
  duration    Int      // in seconds
  programId   String?
  notes       String?
  completedAt DateTime @default(now())
  localDate   String?  // User's local date YYYY-MM-DD for timezone-safe bucketing
  localTime   String?  // User's local time HH:MM:SS
  user        User     @relation(fields: [userId], references: [id])

  @@map("workout_sessions")
}

model JournalEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  entry     String   // JSON string containing all journal data
  mood      String?
  weight    Float?
  date      DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("journal_entries")
}

model MealPlan {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  name          String
  planType      String   // Muscle Building, Fat Loss, Keto, etc.
  dailyCalories Float
  proteinTarget Float
  carbsTarget   Float
  fatsTarget    Float
  description   String?
  notes         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])

  @@map("meal_plans")
}

model WorkoutProgram {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  name        String
  programType String   // Push, Pull, Legs, Full Body, etc.
  template    Json     // Array of exercises with sets/reps
  description String?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@map("workout_programs")
}

// --- STRIPE CATALOG MODELS (Mongo) ---
model Product {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  slug             String    @unique
  name             String
  description      String?
  imageUrl         String?
  
  // Additional images and media
  allImages        Json?     // Array of all product image URLs
  localImages      Json?     // Array of local image file paths
  videos           Json?     // Array of video URLs (YouTube, etc)
  
  // Pricing
  partnerPrice     Float?    // Wholesale/partner price
  retailPrice      Float?    // Customer price (with markup)
  
  // Protocol and dosage information
  protocolInfo     Json?     // Object with dosage, frequency, timing, etc
  educationalContent Json?   // Array of educational content
  learnMoreLinks   Json?     // Array of learn more page URLs
  
  // Peptide Tracker Protocol Fields
  isTrackable      Boolean   @default(false)  // Show in peptide tracker
  protocolPurpose  String?   // "Fat Loss", "Healing", "Performance", etc
  protocolDosageRange String? // e.g., "0.5mg-2.5mg" or "250mcg"
  protocolFrequency String?  // e.g., "3x per week", "daily", "every other day"
  protocolTiming   String?   // e.g., "AM", "PM", "twice daily"
  protocolDuration String?   // e.g., "8 weeks on, 8 weeks off"
  vialAmount       String?   // e.g., "10mg", "5mg"
  reconstitutionInstructions String? // e.g., "2ml BAC water"
  syringeUnits     Float?    // For dosage calculator
  
  // Product flags
  active           Boolean   @default(true)
  storefront       Boolean   @default(false)
  featured         Boolean   @default(false)
  category         String?   // Product category
  
  // Stripe integration
  stripeProductId  String?
  lastSyncedAt     DateTime?
  
  // Rich metadata
  metadata         Json?
  originalUrl      String?   // Original product URL from source
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  prices           Price[]
  productPages     ProductPage[]
}

model Price {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  productId      String    @db.ObjectId
  product        Product   @relation(fields: [productId], references: [id])

  label          String?
  unitAmount     Int
  currency       String    @default("usd")
  interval       String?   // "month" | "year" | null for one-time
  isPrimary      Boolean   @default(false)
  active         Boolean   @default(true)

  stripePriceId  String?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Order {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  stripeSessionId       String   @unique
  stripePaymentIntentId String?
  stripeCustomerId      String?
  productId             String?  @db.ObjectId
  priceId               String?  @db.ObjectId
  amountTotal           Int?
  currency              String?
  email                 String?
  status                String   @default("pending")
  createdAt             DateTime @default(now())
}

// Store full HTML content for product pages
model ProductPage {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  productId         String   @db.ObjectId
  product           Product  @relation(fields: [productId], references: [id])
  
  pageType          String   // "main" | "learn_more" | "education"
  title             String?
  htmlContent       String   // Full HTML content
  textContent       String?  // Plain text version
  sourceUrl         String?  // Original URL where content came from
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([productId, pageType])
  @@map("product_pages")
}

model FoodRef {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  source        String
  sourceId      String
  description   String
  brand         String?
  servingGram   Float?
  per           String   @default("100g")
  nutrientsJson Json
  createdAt     DateTime @default(now())

  @@map("food_refs")
  @@unique([source, sourceId], map: "foodref_source_sourceId")
}

model FoodLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  loggedAt   DateTime @default(now())
  localDate  String?  // User's local date as YYYY-MM-DD for timezone-safe bucketing
  localTime  String?  // User's local time as HH:MM:SS
  source     String
  sourceId   String?
  itemName   String
  brand      String?
  quantity   Float    @default(1)
  unit       String   @default("serving")
  gramWeight Float?
  nutrients  Json
  photoUrl   String?
  notes      String?
  mealType   String   @default("snack")

  @@map("food_logs")
  @@index([userId, loggedAt], map: "foodlog_user_loggedAt")
  @@index([userId, localDate], map: "foodlog_user_localDate")
}
